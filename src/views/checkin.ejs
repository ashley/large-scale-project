<!-- <h2>Check-In</h2>

<form method="POST" action="">
  Place Name:
  <input type="text" name="place">
  <br>
  What kind of spot is this?<br>
  <input type="checkbox" name="wifi"> Wifi<br>
  <input type="checkbox" name="bathroom"> Public Bathroom<br>
  <input type="checkbox" name="quiet"> Quiet Place<br>
  Rating:<br>
  <input type="radio" name="rating" value="1"> 1 (Sad) <br>
  <input type="radio" name="rating" value="2"> 2 (Boo) <br>
  <input type="radio" name="rating" value="3"> 3 (Aiight) <br>
  <input type="radio" name="rating" value="4"> 4 (Cool) <br>
  <input type="radio" name="rating" value="5"> 5 (Extraordinary) <br>
  <br>
  Tip:
  <input type="text" name="tip">
  <br><br>
  <input type="submit" value="Submit">
</form>  -->

<!DOCTYPE html>
<html>
  <head>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
    <title>Places Search Box</title>
    <style>
      /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */
      #placeNameInput {
        display: none;
        width: 600px;
        outline: none;
        border: none;
      }
      #placeAddressInput {
        display: none;
        width: 600px;
        outline: none;
        border: none;
      }

      #placeGoogleId {
        display: none;
        outline: none;
        border: none;
      }
      #placeLat {
        display: none;
        outline: none;
        border: none;
      }
      #placeLong {
        display: none;
        outline: none;
        border: none;
      }
      #map {
        height: 60%;
      }
      /* Optional: Makes the sample page fill the window. */
      html, body {
        height: 100%;
        margin: 60px;
        padding: 60px;
      }
      #description {
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
      }

      #infowindow-content .title {
        font-weight: bold;
      }

      #infowindow-content {
        display: none;
      }

      #map #infowindow-content {
        display: inline;
      }

      .pac-card {
        margin: 10px 10px 0 0;
        border-radius: 2px 0 0 2px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
        outline: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        background-color: #fff;
        font-family: Roboto;
      }

      #pac-container {
        padding-bottom: 12px;
        margin-right: 12px;
      }

      .pac-controls {
        display: inline-block;
        padding: 5px 11px;
      }

      .pac-controls label {
        font-family: Roboto;
        font-size: 13px;
        font-weight: 300;
      }

      #pac-input {
        background-color: #fff;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        margin-left: 12px;
        padding: 0 11px 0 13px;
        text-overflow: ellipsis;
        width: 400px;
      }

      #pac-input:focus {
        border-color: #4d90fe;
      }

      #title {
        color: #fff;
        background-color: #4d90fe;
        font-size: 25px;
        font-weight: 500;
        padding: 6px 12px;
      }
      #target {
        width: 345px;
      }
    </style>
  </head>
  <body>
    <div id="filterPanel">
      Filter by: <br>
      <input type="checkbox" name="wifiFilter"> Wifi<br>
      <input type="checkbox" name="bathroomFilter"> Public Bathroom<br>
      <input type="checkbox" name="quietFilter"> Quiet Place<br>
    </div>
    <input id="pac-input" class="controls" type="text" placeholder="Search Box">
    <div id="map"></div>
    <form method="POST" action="">
      <div id='placeName'></div>
      <input type="text" name='placeName' id="placeNameInput">
      <br>
      <div id='placeAddress'></div>
      <input type="text" name='placeAddress' id="placeAddressInput">
      <br>
      <input type="text" name='placeGoogleId' id="placeGoogleId" readonly="">
      <input type="text" name='placeLat' id="placeLat" readonly="">
      <input type="text" name='placeLong' id="placeLong" readonly="">
      What kind of spot is this?<br>
      <input type="checkbox" name="wifi"> Wifi<br>
      <input type="checkbox" name="bathroom"> Public Bathroom<br>
      <input type="checkbox" name="quiet"> Quiet Place<br>
      Rating:<br>
      <input type="radio" name="rating" value="1"> 1 (Sad) <br>
      <input type="radio" name="rating" value="2"> 2 (Boo) <br>
      <input type="radio" name="rating" value="3"> 3 (Aiight) <br>
      <input type="radio" name="rating" value="4"> 4 (Cool) <br>
      <input type="radio" name="rating" value="5"> 5 (Extraordinary) <br>
      <br>
      Tip:
      <input type="text" name="tip">
      <br><br>
      <input type="submit" id="submitButton" value="Submit">
    </form>
    <% if(spots) {%>
      <ul>
        <% for(var i=0; i<spots.length; i++) { %>
          <li><%= spots[i].name %></li>
        <% } %>
      </ul>
    <% } %>
    <script>
      // This example adds a search box to a map, using the Google Place Autocomplete
      // feature. People can enter geographical searches. The search box will return a
      // pick list containing a mix of places and predicted search terms.

      // This example requires the Places library. Include the libraries=places
      // parameter when you first load the API. For example:
      // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">
      let firstPlace;
      let map;
      let dbMarkers = [];
      let markers = [];

      function hideDBMarkers() {
        dbMarkers.forEach(function(marker) {
          marker.setMap(null);
        });
      }

      function showDBMarkers() {
        // let wifiOnly = document.getElementByName("wifiFilter").checked;
        // let bathroomOnly = document.getElementByName("bathroomFilter").checked;
        // let quietOnly = document.getElementByName("quietFilter").checked;

        dbMarkers.forEach(function(marker) {
          marker.setMap(map);
        });
      }

      function updatePlace(place) {
        firstPlace = place;

        document.getElementById("placeName").innerHTML = 'Your Chosen Place Name: '
        document.getElementById("placeNameInput").setAttribute('value', firstPlace.name);
        document.getElementById("placeNameInput").setAttribute('readonly', "");
        document.getElementById("placeNameInput").style.display = "block";

        document.getElementById("placeAddress").innerHTML = 'Your Chosen Place Address: '
        document.getElementById("placeAddressInput").setAttribute('value', firstPlace.formatted_address);
        document.getElementById("placeAddressInput").setAttribute('readonly', "");
        document.getElementById("placeAddressInput").style.display = "block";
      }

      function geocodeAddress(geocoder, resultsMap) {
        let address = firstPlace.formatted_address;
        geocoder.geocode({'address': address}, function(results, status) {
          if (status === 'OK') {
            console.log('results: ', results[0]);
            let position = results[0].geometry.location;
            resultsMap.setCenter(position);
            // let marker = new google.maps.Marker({
            //   map: resultsMap,
            //   position: position
            // });
            //
            // let infowindow = new google.maps.InfoWindow({
            //   content: firstPlace.name
            // });
            // marker.addListener('click', function() {
            //   infowindow.open(resultsMap, marker);
            // });

            let string = JSON.stringify(position)
            let obj = JSON.parse(string)

            console.log(string)
            console.log(obj)
            console.log(obj.lat)
            console.log('firstplace print: ', firstPlace)
            document.getElementById("placeGoogleId").setAttribute('value', firstPlace.place_id);
            document.getElementById("placeLat").setAttribute('value', obj.lat);
            document.getElementById("placeLong").setAttribute('value', obj.lng);
          } else {
            alert('Geocode was not successful for the following reason: ' + JSON.stringify(status));
          }
        });
      }

      function initAutocomplete() {
        map = new google.maps.Map(document.getElementById('map'), {
          //center: {lat: -33.8688, lng: 151.2195},
          center: {lat: 40.7308, lng: -73.9973},
          zoom: 15,
          mapTypeId: 'roadmap'
        });

        let spots = <%- JSON.stringify(spots) %>;
        console.log(spots);

        spots.forEach(function(place) {
          let position = {lat: place.lat, lng: place.lng};
          let marker = new google.maps.Marker({
            map: map,
            title: place.name,
            position: position
          });

          let infowindow = new google.maps.InfoWindow({
            content: place.name + "<br>" + place.address
          });

          marker.addListener('click', function() {
            updatePlace(place);
            markers.forEach(marker => marker.setMap(null));
          });

          marker.addListener('mouseover', function() {
            infowindow.open(map, marker);
          });

          marker.addListener('mouseout', function() {
            infowindow.close();
          })

          dbMarkers.push(marker);
        });



        // let geocoder = new google.maps.Geocoder();
        // document.getElementById('submitButton').addEventListener('click', function() {
        //   geocodeAddress(geocoder, map);
        // });

        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
          searchBox.setBounds(map.getBounds());
        });

        markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function() {
          var places = searchBox.getPlaces();
          console.log("places: ", places)

          if (places.length == 0) {
            return;
          }

          // Clear out the old markers.
          markers.forEach(function(marker) {
            marker.setMap(null);
          });
          markers = [];


          //document.getElementById("placeName").innerHTML = 'Name: ' + firstPlace.name + ' \nAddress: '+ firstPlace.formatted_address ;
          updatePlace(places[0]);
          let geocoder = new google.maps.Geocoder();
          geocodeAddress(geocoder, map);

          // For each place, get the icon, name and location.
          var bounds = new google.maps.LatLngBounds();
          places.forEach(function(place) {
            if (!place.geometry) {
              console.log("Returned place contains no geometry");
              return;
            }

            var icon = {
              url: place.icon,
              size: new google.maps.Size(71, 71),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(17, 34),
              scaledSize: new google.maps.Size(25, 25)
            };

            let marker = new google.maps.Marker({
              map: map,
              icon: icon,
              title: place.name,
              position: place.geometry.location
            });

            console.log(place.geometry.location);

            let infowindow = new google.maps.InfoWindow({
              content: place.name + "<br>" + place.formatted_address
            });

            marker.addListener('click', function() {
              updatePlace(place);
            });

            marker.addListener('mouseover', function() {
              infowindow.open(map, marker);
            });

            marker.addListener('mouseout', function() {
              infowindow.close();
            })

            // Create a marker for each place.
            markers.push(marker);

            if (place.geometry.viewport) {
              // Only geocodes have viewport.
              bounds.union(place.geometry.viewport);
            } else {
              bounds.extend(place.geometry.location);
            }
          });
          map.fitBounds(bounds);
        });
      }

    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC-yMF_1lEOcOidKth8PsGX2eTTNthb02A&libraries=places&callback=initAutocomplete"
         async defer></script>
  </body>
</html>>
